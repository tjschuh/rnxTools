#!/bin/tcsh
#
# automatically process rinex files with PRIDE-PPPAR
# no inputs, just run function in a directory full of .obs files
# only works with data from 2020 and beyond
#
# INPUT:
#
# $1      the file extension of your RINEX files i.e. what follows .
# $2      data sampling rate (eventually get this value automatically from another function)
# $3      the marker name of your station (marker name in RINEX file)
# $4      config file type i.e. daily, hourly, mobile, or seismic
# $5      directory path to config file
#
# OUTPUT:
#
# sorted directories with processed data in each
#
# EXAMPLES:
#
# ppp2prd 20o 15 pton daily ~/Configs
#
# Originally written by tschuh-at-princeton.edu, 10/12/2021
# Last modified by tschuh-at-princeton.edu, 03/29/2022

set warnin = 0
if($#argv < 5)then
  echo ' '
  echo 'PPP2PRD: Five input arguments expected:'
  echo ' '
  echo '----------> PPP2PRD extension int markername configtype configpath'
  echo '----------> where extension is RINEX file extension'
  echo '----------> where int is data sampling rate'
  echo '----------> where markername is 4 characters'
  echo '----------> where configtype is either daily, hourly, mobile, or seismic'
  echo '----------> where configpath is path/to/Configs/directory'
  echo ' '
  @ warnin +=1
  goto label999
endif

################################################################################

# redefine inputs for convenience
set ext = $1
set int = $2
set mkr = $3
set cfgtype = $4
set cfgpath = $5

# put all obs files into appropriate directories called "file####"
rnx2dir $ext

# count number of directories named hour*
set max = `find file* -maxdepth 0 -type d -print | wc -l`
set range = `seq 1 $max`

foreach num ($range[*])
    # cd into file####
    set name = `printf "file%3.3i" $num`
    cd $name

    # get name of *.obs file
    set outfile = `/bin/ls -1 *.{$ext} | xargs -n1 basename`

    # copy and edit config file for right rinex path
    cp $cfgpath/config_template_{$cfgtype} .
    set oldpath = `awk '/Rinex directory/ {print $4}' config_template_{$cfgtype}`
    set newpath = `pwd`
    sed -i 's@'"$oldpath"'@'"$newpath"'@' config_template_{$cfgtype}

    # compute the day number of the current year
    # and the corresponding date string from obs file
    set fYYYY = `awk '/TIME OF FIRST OBS/ {print $1}' *.{$ext}`
    set fYYYY = `printf "%4.4i" $fYYYY`
    set fMM = `awk '/TIME OF FIRST OBS/ {print $2}' *.{$ext}`
    set fMM = `printf "%02.0f" $fMM`
    set fDD = `awk '/TIME OF FIRST OBS/ {print $3}' *.{$ext}`
    set fDD = `printf "%02.0f" $fDD`
    set fdate = `printf $fYYYY$fMM$fDD`
    # this command seems to only work on linux machines
    set fdoy = `date +%j --date=$fdate`

    set lYYYY = `awk '/TIME OF LAST OBS/ {print $1}' *.{$ext}`
    set lYYYY = `printf "%4.4i" $lYYYY`
    set lMM = `awk '/TIME OF LAST OBS/ {print $2}' *.{$ext}`
    set lMM = `printf "%02.0f" $lMM`
    set lDD = `awk '/TIME OF LAST OBS/ {print $3}' *.{$ext}`
    set lDD = `printf "%02.0f" $lDD`
    set ldate = `printf $lYYYY$lMM$lDD`
    set ldoy = `date +%j --date=$ldate`

    # compare fdoy and ldoy
    # if equal then we need 1 file
    if ($fdate == $ldate) then
	# change name of rnx file to correct name
	# not sure if need this line
	#mv *.{$ext} {$mkr}{$fdoy}0.{$ext}

	# run pdp3 and output to cfg file 
	pdp3 config_template_{$cfgtype} $fdate $ldate $mkr k $int y >! $outfile:r.cfg

	# run kin2prd to get .prd and .hdr files
	kin2prd $fYYYY/$fdoy/kin_*

	cd ..
    # if not equal we need 2 files
    else
	cp *.{$ext} {$mkr}{$fdoy}0.20o
	mv *.{$ext} {$mkr}{$ldoy}0.20o

	# need to edit both files
	# this should become its own function
	# modify the headers so both files have correct epoch info
	# first file
	set endyrp = `awk '/TIME OF FIRST OBS/ {print $1}' {$mkr}{$fdoy}0.20o`
	set endyr = `printf "%4.4i" $endyrp`
	set endmnp = `awk '/TIME OF FIRST OBS/ {print $2}' {$mkr}{$fdoy}0.20o`
	set endmn = `printf "%2.2i" $endmnp`
	set enddyp = `awk '/TIME OF FIRST OBS/ {print $3}' {$mkr}{$fdoy}0.20o`
	set enddy = `printf "%2.2i" $enddyp`
	set endhrp = `awk '/TIME OF FIRST OBS/ {print $4}' {$mkr}{$fdoy}0.20o`
	set endhr = `printf "%2.2i" $endhrp`

	set etline = `awk '/TIME OF LAST OBS/ {print NR}' {$mkr}{$fdoy}0.20o`
	sed -i ''"$etline"'d' {$mkr}{$fdoy}0.20o
	sed -i ''"$etline"' i \ \ '"$endyr"'    '"$endmn"'    '"$enddy"'    '"$endhr"'    59   59.0000000     GPS         TIME OF LAST OBS' {$mkr}{$fdoy}0.20o

	# last file
	set styrp = `awk '/TIME OF LAST OBS/ {print $1}' {$mkr}{$ldoy}0.20o`
	set styr = `printf "%4.4i" $styrp`
	set stmnp = `awk '/TIME OF LAST OBS/ {print $2}' {$mkr}{$ldoy}0.20o`
	set stmn = `printf "%2.2i" $stmnp`
	set stdyp = `awk '/TIME OF LAST OBS/ {print $3}' {$mkr}{$ldoy}0.20o`
	set stdy = `printf "%2.2i" $stdyp`
	set sthrp = `awk '/TIME OF LAST OBS/ {print $4}' {$mkr}{$ldoy}0.20o`
	set sthr = `printf "%2.2i" $sthrp`

	set stline = `awk '/TIME OF FIRST OBS/ {print NR}' {$mkr}{$ldoy}0.20o`
	sed -i ''"$stline"'d' {$mkr}{$ldoy}0.20o
	sed -i ''"$stline"' i \ \ '"$styr"'    '"$stmn"'    '"$stdy"'    '"$sthr"'    00   00.0000000     GPS         TIME OF FIRST OBS' {$mkr}{$ldoy}0.20o

	# need to cut out blocks of each file so each file only has data from specific days
	# use the line ending in 0 0 as the threshold line
	# for the last file, delete all lines from header down until threshold
	set shortstyr = `echo $styr-2000 | bc`
	set endline = `awk '/'"$shortstyr"'\s+'"$stmnp"'\s+'"$stdyp"'\s+'"$sthrp"'\s+0\s+0/ {print NR}' {$mkr}{$ldoy}0.20o`
	set hline = `rnx2hdr {$mkr}{$ldoy}0.20o`
	set hline = `echo $hline+1 | bc`
	set endline = `echo $endline-1 | bc`
	sed -i ''"$hline"','"$endline"'d' {$mkr}{$ldoy}0.20o

	# for first file, delete all lines from threshold until end
	set shortendyr = `echo $endyr-2000 | bc`
	set startline = `awk '/'"$shortendyr"'\s+'"$stmnp"'\s+'"$stdyp"'\s+'"$sthrp"'\s+0\s+0/ {print NR}' {$mkr}{$fdoy}0.20o`
	sed -i ''"$startline"',$d' {$mkr}{$fdoy}0.20o

	# run pdp3 and output to cfg file 
	pdp3 config_template_{$cfgtype} $fdate $ldate $mkr k 1 y >! $outfile:r.cfg

	# we know names of directories ($fdoy, $ldoy)
	# go into them and combine kin files into one
	# make new directory containing combined file(s)
	# make a new master directory to contain both set of files
	mkdir $fYYYY-$lYYYY
	mkdir $fYYYY-$lYYYY/$fdoy-$ldoy
	# change names of some files to make them more date specific
	mv $fYYYY/$fdoy/igserp $fYYYY/$fdoy/igserp_$fYYYY$fdoy
	mv $fYYYY/$fdoy/leap.sec $fYYYY/$fdoy/leap_$fYYYY$fdoy.sec
	mv $fYYYY/$fdoy/sit.xyz $fYYYY/$fdoy/sit_$fYYYY$fdoy.xyz

	mv $lYYYY/$ldoy/igserp $lYYYY/$ldoy/igserp_$lYYYY$ldoy
	mv $lYYYY/$ldoy/leap.sec $lYYYY/$ldoy/leap_$lYYYY$ldoy.sec
	mv $lYYYY/$ldoy/sit.xyz $lYYYY/$ldoy/sit_$lYYYY$ldoy.xyz
	# copy 16 of 24 files from each directory to new master directory
	cp $fYYYY/$fdoy/*$fYYYY$fdoy* $fYYYY-$lYYYY/$fdoy-$ldoy
	cp $lYYYY/$ldoy/*$lYYYY$ldoy* $fYYYY-$lYYYY/$fdoy-$ldoy

	# delete og directories
	rm -rf $fYYYY $lYYYY
	
	# set some var names for convienance 
	set ogkin1 = `echo $fYYYY-$lYYYY/$fdoy-$ldoy/kin_{$fYYYY}{$fdoy}_{$mkr}`
	set ogkin2 = `echo $fYYYY-$lYYYY/$fdoy-$ldoy/kin_{$lYYYY}{$ldoy}_{$mkr}`
	set combo = `echo $fYYYY-$lYYYY/$fdoy-$ldoy/kin_{$fYYYY}{$fdoy}_{$lYYYY}{$ldoy}_{$mkr}`

	# make new combined kin file
	touch $combo
	# find end of header for both files
	set hdrend1 = `rnx2hdr $ogkin1`
	set hdrend2 = `rnx2hdr $ogkin2`
	# add 1 to this one to get the lien that comes after
	set hdrend2 = `echo "$hdrend2+1" | bc`
	
	# copy header lines from both ogkin files to combo
	# ignore end of header line from ogkin1
	awk 'NR<'"$hdrend1"' {print}' $ogkin1 >> $combo
	awk 'NR<='"$hdrend2"' {print}' $ogkin2 >> $combo
	
	# copy data lines from both ogkin files to combo
	set hdrend1 = `echo "$hdrend1+1" | bc`
	# set hdrend2 = `echo "$hdrend2+1" | bc`
	awk 'NR>'"$hdrend1"' {print}' $ogkin1 >> $combo
	awk 'NR>'"$hdrend2"' {print}' $ogkin2 >> $combo

	# instead of using awk and sed to change the dates
	# in the hdr, just keep bot hdrs with dates unchanged

	# run kin2prd to get .prd and .hdr files
	kin2prd $fYYYY-$lYYYY/$fdoy-$ldoy/kin_*_*_{$mkr}

	cd ..

    endif
end

################################################################################
label999:
echo ' '
if ($warnin == 1) then
    echo "Script PPP2PRD stopped, $warnin warning message generated"
else
    echo "Script PPP2PRD finished, $warnin warning messages generated"
endif
echo ' '
