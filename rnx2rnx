#!/bin/tcsh -f
#
# Takes a RINEX file and creates another RINEX file from it that
# begins at # a user defined start time and ends at a user defined
# end time
#
# INPUT:
#
# $1      a RINEX file
# $2      offset from original start time in seconds   
# $3      duration of generated RINEX file in seconds
#
# OUTPUT:
#
# *.rnx   RINEX file with new start and end times, newly named *.rnx
#
# Last modified by tschuh-at-princeton.edu on 06/11/2021

set warnin = 0
if($#argv < 3)then
  echo ' '
  echo 'RNX2RNX: At least three input argument expected:'
  echo ' '
  echo '----------> RNX2RNX file offset duration'
  echo '----------> where offset and duration in s'
  echo ' '
  @ warnin +=1
  goto label999
endif

# Input parsing
set infile = $1
set offset = $2
set duration  = $3

################################################################################
# Now the code starts

# New extension
set outfile = `echo $infile:r.rnx` 

# Warn if the output file already exist
test -f $outfile && echo Overwriting $outfile

# compute the number of header lines
set hlength = `awk '/END OF HEADER/ {print NR}' $infile`

# copy header from $1 to new file 
# which we will use to run gd2e.py on
sed -n '1,'"$hlength"'p' $infile >! $outfile

# save the start and end time variables (yr,mm,dd,hr,min,sec)
set yr1 = `awk '/FIRST/ {print $1}' $infile`
set mon1 = `awk '/FIRST/ {print $2}' $infile`
set day1 = `awk '/FIRST/ {print $3}' $infile`
set hr1 = `awk '/FIRST/ {print $4}' $infile`
set min1 = `awk '/FIRST/ {print $5}' $infile`
set sec1 = `awk '/FIRST/ {print $6}' $infile`

set yr2 = `awk '/LAST/ {print $1}' $infile`
set mon2 = `awk '/LAST/ {print $2}' $infile`
set day2 = `awk '/LAST/ {print $3}' $infile`
set hr2 = `awk '/LAST/ {print $4}' $infile`
set min2 = `awk '/LAST/ {print $5}' $infile`
set sec2 = `awk '/LAST/ {print $6}' $infile`

# this is where computation of start time has to go
# take start time and $2, and compute the new start time
rnx2beg $yr1 $mon1 $day1 $hr1 $min1 $sec1 $offset

set yr1p = `awk '/ / {print $1}' starttime`
set mon1p = `awk '/ / {print $2}' starttime`
set day1p = `awk '/ / {print $3}' starttime`
set hr1p = `awk '/ / {print $4}' starttime`
set min1p = `awk '/ / {print $5}' starttime`
set sec1p = `awk '/ / {print $6}' starttime`

# must get rid of all the leading zeroes 

rm starttime

# take new start time and $3, and compute the new end time
rnx2end $yr1p $mon1p $day1p $hr1p $min1p $sec1p $duration

set yr2p = `awk '/ / {print $1}' endtime`
set mon2p = `awk '/ / {print $2}' endtime`
set day2p = `awk '/ / {print $3}' endtime`
set hr2p = `awk '/ / {print $4}' endtime`
set min2p = `awk '/ / {print $5}' endtime`
set sec2p = `awk '/ / {print $6}' endtime`

rm endtime

set stline = `awk '/TIME OF FIRST OBS/ {print NR}' $infile`
sed -i ''"$stline"'d' $outfile
sed -i ''"$stline"' i \ \ '"$yr1p"'    '"$mon1p"'    '"$day1p"'    '"$hr1p"'    '"$min1p"'   '"$sec1p"'.0000000     GPS         TIME OF FIRST OBS' $outfile

set etline = `awk '/TIME OF LAST OBS/ {print NR}' $infile`
sed -i ''"$etline"'d' $outfile
sed -i ''"$etline"' i \ \ '"$yr2p"'    '"$mon2p"'    '"$day2p"'    '"$hr2p"'    '"$min2p"'   '"$sec2p"'.0000000     GPS         TIME OF LAST OBS' $outfile

# text match the end time of rinex in the original file
# then copy all the lines in between start time
# and end time + the block after end time 
set yrstart = `echo "$yr1p-2000" | bc`
set yrend = `echo "$yr2p-2000" | bc`

set mon1p = `printf "%1.0f" $mon1p`
set day1p = `printf "%1.0f" $day1p`
set hr1p = `printf "%1.0f" $hr1p`
set min1p = `printf "%1.0f" $min1p`
set sec1p = `printf "%1.0f" $sec1p`
set mon2p = `printf "%1.0f" $mon2p`
set day2p = `printf "%1.0f" $day2p`
set hr2p = `printf "%1.0f" $hr2p`
set min2p = `printf "%1.0f" $min2p`
set sec2p = `printf "%1.0f" $sec2p`

# text match the appropriate start and end times to 
# obtain the line numbers of each
# \s+ means expect at least one space
set startln = `awk '/'"$yrstart"'\s+'"$mon1p"'\s+'"$day1p"'\s+'"$hr1p"'\s+'"$min1p"'\s+'"$sec1p"'/ && NR>'"$hlength"' {print NR}' $infile`

# each block length is (3*#obs) where #obs is the first numbr in column 8 of the time line
set multiple = `awk '/'"$yrend"'\s+'"$mon2p"'\s+'"$day2p"'\s+'"$hr2p"'\s+'"$min2p"'\s+'"$sec2p"'/ && NR>'"$hlength"' {print substr($8,1,2)}' $infile`
 
set endln = `awk '/'"$yrend"'\s+'"$mon2p"'\s+'"$day2p"'\s+'"$hr2p"'\s+'"$min2p"'\s+'"$sec2p"'/ && NR>'"$hlength"' {print NR}' $infile`
# to calculate the final line # of the endtime
# we take the endtime line # and add to it the
# length of the corresponding block
# each block is (3*multiple) but we also need
# to add 2 more because the header of each block
# is 3 lines, but we already took ino account the
# fist line of the block header
set endln = `echo "${multiple}*3+${endln}+2" | bc`

# copy everything from startln to endln to outfile
# to get all the necessary data
sed -n ''"$startln"','"$endln"'p' $infile >> $outfile

################################################################################
label999:
echo ' '
if ($warnin == 1) then
    echo "Script RNX2RNX stopped, $warnin warning message generated"
else
    echo "Script RNX2RNX stopped, $warnin warning messages generated"
endif
echo ' '
