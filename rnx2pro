#!/bin/tcsh
#
# automatially prepare and process RINEX files from
# various stations across a range of days
#
# INPUT:
#
# $1        ASCII file containing list of 4-character station/marker codes i.e. 0842
# $2        year data is from (currently doesnt work with multiple years)
# $3        start day of year (doy) in range of days being processed
# $4        end day of year (doy) in range of days being processed
# $5        sampling interval of RINEX files in seconds (currently cant take multiple values)
# $6        "yes" or "no" switch for ambiguity resolution (AR) when using PRIDE PPP-AR
# $7        "yes" or "no" switch for tidal corrections when using PRIDE PPP-AR
# $8        name of PRIDE PPP-AR configuration file used throughout run in working directory
# $9        path/to/directory/containing/directories/of/RINEX/observation/files
# $10       path/to/directory/containing/directories/of/RINEX/navigation/files (if different)
#
# AUXILLARY CODE NEEDED:
#
# rnxTools
#
# EXAMPLE:
#
# rnx2pro path/2/stations.list 2011 67 67 1 no no path/2/config_daily_GEONET_JAPAN_2011_DAYS_67_TO_85 /home/seismogeodesy/DATA/NETWORKS/GEONET_JAPAN/rinex1hz/ /home/seismogeodesy/DATA/NETWORKS/GEONET_JAPAN/rinex/
#
# Originally written by tschuh-at-princeton.edu, 06/07/2022
# Last modified by tschuh-at-princeton.edu, 07/27/2022

# start in directory with which you want station directories
# containing various runs i.e. 0842/ 0843/ 0844/

# Things to edit:
# hour long files are being linked and then concatenated to make file day long ofile
# but that in itself is not linked and about 90 MB in size so we should so something about that
# need to eventually address how we are assuming hour long files from the start when that might not
# always be the case (could have 15 minute files, day long files to begin with, etc.)
# FIGURE OUT WAY TO ADD LEADING ZEROS TO SDOY AND EDOY IF USER DOES NOT GIVE THEM

set warnin = 0
if($#argv == 9)then
set rinexdir = $9
set navdir = $9
else if($#argv == 10)then
set rinexdir = $9
set navdir = $10
else
  echo ' '
  echo 'RNX2PRO: ten input arguments expected:'
  echo ' '
  echo '----------> RNX2PRO statlist yr sdoy edoy sps ar tides prideconfig rinexdir [navdir]'
  echo '----------> where statlist is a list of 4-character station/marker codes'
  echo '----------> where yr is year'
  echo '----------> where sdoy is start day of year'
  echo '----------> where edoy is end day of year'
  echo '----------> where sps is sampling rate in seconds'
  echo '----------> where ar is either yes for ambiguity resolution or no for no AR'
  echo '----------> where tides is either yes for corrections or no for no corrections'
  echo '----------> where prideconfig is file containing PRIDE PPP-AR configuration'
  echo '----------> where rinexdir is directory containing day/station full RINEX files'
  echo '----------> where navdir is directory containing day/station navigation files'
  echo ' '
  @ warnin +=1
  goto label999
endif

#########################################################################

# define variables from inputs
set stlist = $1
set yr = $2
set split = ($yr:as/20/ /)
set yr2 = $split[1]
set sdoy = $3
set edoy = $4
set sps = $5
set ar = $6
set tides = $7
set prideconfig = $8

# define sequence of days
set days = `seq -f %03g $sdoy $edoy`

# use the natural version of ls in case it's aliased
unalias ls
unalias cd

# before actually running PRIDE PPP-AR
# put 1 config file in same spot as all station
# directories and use it for every processing run
set cfgpth = `pwd`

# loop over marker names
foreach mkr (`awk '{print $1}' $stlist`)
    mkdir $mkr
    cd $mkr
    echo 'Working on marker : '$mkr
    foreach day ($days[*])
	# get standard RINEX ofiles for all hours of DoY and link them
	ls $rinexdir/$yr/$day/?/{$mkr}*.{$yr2}{o,O} >! templist       	
	foreach ofile ( `cat templist` )
		ln -s $ofile
		rnx2tlo $ofile
	end
	rm -f templist

	# get corresponding nav file, link it, and change its name
	set nfile = `ls $navdir/$yr/$day/{$mkr}*.{$yr2}{n,N}`
	ln -s $nfile
	# change name of nav file so PRIDE acknowledges it
	# navfile --> brdm{$day}0.{$yr2}p
	mv -f {$mkr}*.{$yr2}{n,N} brdm{$day}0.{$yr2}p

    echo 'CONCATENATION PART'
	# now concatenate all the RINEX files for each day into 1 file
	set files = `/usr/bin/ls {$mkr}{$day}[a-b,A-B].{$yr2}{o,O}`
	echo $files
	rnx2cat $files ; mv -f cat.rnx tempfile
	set files = `/usr/bin/ls {$mkr}{$day}[c-x,C-X].{$yr2}{o,O}`
	foreach file ($files[*])
	    echo $file
	    rnx2cat tempfile $file ; mv -f cat.rnx tempfile
	end
	rm -rf {$mkr}{$day}[a-x,A-X].{$yr2}{o,O}
	mv -f tempfile {$mkr}{$day}0.{$yr2}{o}
    end
    cd ..
    echo '################################################'
    echo ' '

    echo 'PRIDE PART'
    # cd into each station directory
    cd $mkr
    # actually run PRIDE (with various options depending on user input)
    if ($ar == yes) then
	if ($tides == yes) then
	    pdp3 -cfg $cfgpth/$prideconfig -m K -s $yr/$sdoy -e $yr/$edoy -n $mkr -i $sps $cfgpth/$mkr/{$mkr}{$sdoy}0.{$yr2}{o}
	else if ($tides == no) then
	    pdp3 -cfg $cfgpth/$prideconfig -m K -s $yr/$sdoy -e $yr/$edoy -n $mkr -i $sps -toff SOP $cfgpth/$mkr/{$mkr}{$sdoy}0.{$yr2}{o}
	else
	    echo ' '
	    echo 'Please select either yes or no for tidal corrections'
	    echo ' '
	    @ warnin +=1
	    goto label999
	endif
    else if ($ar == no) then
	if ($tides == yes) then
	    pdp3 -cfg $cfgpth/$prideconfig -m K -s $yr/$sdoy -e $yr/$edoy -n $mkr -i $sps -f $cfgpth/$mkr/{$mkr}{$sdoy}0.{$yr2}{o}
	else if ($tides == no) then
	    pdp3 -cfg $cfgpth/$prideconfig -m K -s $yr/$sdoy -e $yr/$edoy -n $mkr -i $sps -toff SOP -f $cfgpth/$mkr/{$mkr}{$sdoy}0.{$yr2}{o}
	else
	    echo ' '
	    echo 'Please select either yes or no for tidal corrections'
	    echo ' '
	    @ warnin +=1
	    goto label999
	endif
    else
	echo ' '
	echo 'Please select either yes or no for ambiguity resolution (AR)'
	echo ' '
	@ warnin +=1
	goto label999
    endif

    # cd into output directory i.e. 2011/067-084/ and run code from kin2prd
    cd $yr/$sdoy-$edoy/

    set infile = `ls kin_*`
    set hdrend = `rnx2hdr $infile`
    set hdrend = `echo "$hdrend+1" | bc`
    # create hdr and prd files from original file
    awk 'NR<='"$hdrend"' {print}' $infile >! $infile:r.hdr
    awk 'NR>'"$hdrend"' {print}' $infile >! $infile:r.prd
    # remove any stray asterisks (*) in the prd file
    if ($OSTYPE == 'linux') then
	sed -i 's/\*/ /g' $infile:r.prd
    else if ($OSTYPE == 'darwin') then
	# on MacOS need to add '' in beginning for creation of output file
	sed -i '' 's/\*/ /g' $infile:r.prd
    else
	echo "Code did not run"
    endif

    # cd back up to base directory with all stations
    cd ../../../

end


##############################################################################

label999:
echo ' '
if ($warnin == 1) then
    echo "Script RNX2PRO stopped, $warnin warning message generated"
else
    echo "Script RNX2PRO finished, $warnin warning messages generated"
endif
echo ' '
